* Setting Up On A New System
** Linux
*** Arch
**** Security
***** SSH
We all ready generate an SSH key when we configure git. But if we ever want to set-up something more secure, say perhaps locked behidn a password...
#+BEGIN_SRC shell
ssh-keygen -t rsa -b 4096 -C "justincbarclay@gmail.com"
#+END_SRC

***** GPG
First setting up a linux dev machine
#+BEGIN_SRC shell
gpg --full-generate-key
#+END_SRC

You'll then want to configure config files gpg-agent and gpg

For gpg we disabled tty
#+BEGIN_QUOTE
Make sure that the TTY (terminal) is never used for any output. This option is needed in some cases because GnuPG sometimes prints warnings to the TTY even if --batch is used.
#+END_QUOTE

#+NAME gpg.conf
#+BEGIN_SRC config
no-tty
#+END_SRC

For gpg-agent, I turn up the length a session can last, which is pretty much as long as my Linux instance runs. Why? Mostly laziness. I also set emacs as a possible pinentry program, because I use Linux explicitly on the command line and run Emacs through X11 I need a nice way to get access to pinentry.
#+NAME gpg-agent.conf
#+BEGIN_SRC config
# Cache for entire user session
default-cache-ttl 34560000
max-cache-ttl 34560000

pinentry-program /usr/bin/pinentry-emacs
allow-emacs-pinentry
#+END_SRC
***** Web
Once we have generated our SSH and GPG keys we can update our important websites.

This includes:
1. Github
2. Gitlab
3. AWS

**** Postgres
I may have it set-up to automatically install and configure postgres, but I don't have the service enabled. Docker doesn't really support system-md.
#+BEGIN_SRC shell
systemctl enable --now postgresql.service
#+END_SRC

**** Redis
Similarly to Postgres, redis isn't set-up to fun as a daemon, and so we must enable it.
#+BEGIN_SRC shell
systemctl enable --now redis.service
#+END_SRC
**** Email
I don't know what I am doing here any more, webtech rulz and command line drulz. At least, I don't want to deal with Google and pulling in stuff open source anymore.
**** Emacs
1. Pinentry
Now that we've integrated GPG more into our workflow, we'll want to set-up emacs to be able to use it.
#+BEGIN_SRC shell
  (pinentry-start)
#+END_SRC

2. all-the-icons
You may notice, when starting Emacs up, for the first time that it is missing some fonts. That's probably because we haven't install all-the-icons yet
#+BEGIN_SRC elisp
  (all-the-icons-install-fonts)
#+END_SRC

** Guix
I should write a section here as well. But FWIW I found the Guix
system simple and lovely to work with. Tools like home manager are
built in, setting up dev environments is just as easy and they have a
utility to import several lanagueges into their package system.

Sadly, setting up a modern rust dev environment was a lot of work and
I was at a loss of where to look for informaion
** Nix/NixOS
Recently, I've been experimenting with [[https://nixos.org/][NixOS]] on [[https://github.com/nix-community/NixOS-WSL][WSL2]] as my main dev
environment. I like the Nix ecosystem because it follows a very
declarative format. I can state my system and dev environment
requirements in a series of [[https://nixos.wiki/wiki/Flakes][nix]] files. Then I can easily run one or
two commands and spin up, or update, an my entire machine. Or I can
lock down packages to specific git revisions and kmake sure they stay
to a specific version. Unfortunately, there are two big downsides for
Nix and NixOS, the documentation is lacking and some of the devtools
aren't straight forward. But once you have some examples and tooling
set up it can run as smooth as a baby's buttered bottom.
*** Tools
**** Nix
If you go with the WSL2 distro from github you have'll have [[https://github.com/NixOS/nix][Nix]] installed already.
**** Home Manager
You'll use [[https://github.com/nix-community/home-manager][home-manager]] as a way to declaratively manage your user local packages (as opposed to system wide)
**** Direnv + Lorri
Throught the combination of [[https://direnv.net/][direnv]] and [[https://github.com/nix-community/lorri][lorri]] you can lazy load a per project dev environment
*** Resources
**** Nix
https://nixos.org/guides/nix-pills/
https://zero-to-nix.com/
**** NixOS
https://jdisaacs.com/blog/nixos-config/
https://github.com/mikeyobrien/nix-config/blob/master/hosts/nix-wsl/configuration.nix
**** Home Manager
https://www.chrisportela.com/posts/home-manager-flake/
https://www.bekk.christmas/post/2021/16/dotfiles-with-nix-and-home-manager
https://mudrii.medium.com/nixos-home-manager-on-native-nix-flake-installation-and-configuration-22d018654f0c
https://github.com/vereis/nixos/blob/master/machines/configuration.nix
- Lorri
  https://github.com/nix-community/lorri
- Direnv
  https://direnv.net/
**** Flake
https://nixos.wiki/wiki/Flakes
https://www.tweag.io/blog/2020-05-25-flakes
https://serokell.io/blog/practical-nix-flakes
